Each item should have the following fields:

id -- a serial primary key
title -- not optional, string up to 255 characters
details -- optional, holds a large amount of text
priority -- not optional, an integer. Default is 1.
created_at -- not optional. A date and time.
completed_at -- optional. A date a time.
In a file called todo.sql:

Write the CREATE TABLE statement to make this table.
Write INSERT statements to insert five todos into this table, with one of them completed.
Write a SELECT statement to find all incomplete todos.
Write a SELECT statement to find all todos with a priority above 1.
Write an UPDATE statement to complete one todo by its id. Your ids may differ, so you will choose the id to update.
Write a DELETE statement to delete all completed todos.

--CHECK!
CREATE TABLE task_database(
id SERIAL PRIMARY KEY,
title VARCHAR(255) NOT NULL,
details TEXT,
priority INTEGER NOT NULL DEFAULT '1',
created_at TIMESTAMP NOT NULL,
completed_at TIMESTAMP
);
--STEP 2
INSERT INTO task_database (title, details, priority, created_at, completed_at)
VALUES
('Swab the Decks', 'A swabbed deck is a delight to all', 1, CURRENT_TIME, CURRENT_TIME)
('Hoist the Mizzen', 'Mizzens don\'t hoist themselves', 3, CURRENT_TIME,)
('Avast some Mateys', 'A simple hello will do', 4, CURRENT_TIME, )
('Clean the Parrots', 'Such filthy creatures', 5, CURRENT_TIME, )
('Spike the Guns', 'What if we\'re attacked?', 2, CURRENT_TIME, );

--incomplete todos
SELECT task_database FROM completed_at WITH NULL;
--priority > 1
SELECT task_database FROM priority > 1;
--update complete by id
UPDATE task_database SET (completed_at) = (CURRENT_TIME)
WHERE id = 2;
--Delete stuff
DELETE task_database WHERE completed_at = !NULL;
